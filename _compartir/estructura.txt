#Relations
 (hijo) embedded_in :polymorphic_money, polymorphic: true
(padre) embeds_one :money, as: :polymorphic_money

(padre) has_and_belongs_to_many :negotiations, inverse_of: nil
(padre) has_and_belongs_to_many :offer_outbox, class_name: "Offer", inverse_of: nil
-----------------------------------------------------------------------------------
pending("REVISAR: Relations Validations")
pending("PREA: Relations Validations")
-----------------------------------------------------------------------------------
#Modules
require 'spec_helper'

describe Money do
  describe 'Relations' do
    pending("TODO: Relations")
  end

  describe 'Attributes' do
    pending("TODO: Attributes")
  end

  describe 'Validations' do
    #Relations
    pending("TODO: Relations Validations")
    #Attributes
    pending("TODO: Attributes Validations")
  end

  #Behaviour
  describe 'Factory' do
    pending("TODO: Factory")
  end
end
------------------------------------------------------------------------------------
class Money
  #Modules
  #TODO: Modules (or DELETE)

  #Relations
  #TODO: Relations (or DELETE)

  #Attributes
  #TODO: Attributes (or DELETE)

  #Validations (Relations)
  #TODO: Validations Relations(or DELETE)

  #Validations (Attributes)
  #TODO: Validations Attributes(or DELETE)

  #Behaviour
  #TODO: Behaviour (or DELETE)
end
--------------------------------------------------------------------------------------
Codigo en thing:

=begin
  def owner
    thing_box.user
  end

  def to_product
    p=Product.new
    #p.main_photo=main_photo
    p.name=name
    p.description=description
    #p.photos=photos.dup
    p.thing_id=_id
    p.quantity=nil
    return p
  end
=end


codigo en el test de thing------------------------------------------

=begin
#Behaviour
  before (:all) do
    @thing=Fabricate(:thing)
    @product=@thing.to_product
  end

  describe 'Factory' do
    specify { @thing.should be_valid }
  end

  describe '#owner' do
    it 'return the user owner id' do
      @thing.owner.should eq @thing.thing_box.user
    end
  end

  describe '#to_product' do
    describe '=> product' do
#No dan un texto descriptivo
      specify { @product.should be_kind_of(Product) }
      specify { @product.should_not be_persisted }
      specify { @product.name.should eq @thing.name }
      specify { @product.description.should eq @thing.description }
      specify { @product.main_photo.should eq @thing.main_photo }
      specify { @product.thing_id.should eq @thing._id }
      specify { @product.quantity.should be_nil }
      specify { @product.photos.should eq @thing.photos }
    end
  end
=end
-----------------------------------------------------------------------
    it { should validate_presence_of :name }
    it { should validate_length_of(:name).within(2..20) }
    it { should validate_presence_of :surname }
    it { should validate_length_of(:surname).within(2..20) }
    it { should validate_presence_of :nickname }
    it { should validate_uniqueness_of(:nickname) }
    it { should validate_length_of(:nickname).within(2..20) }
    it { should validate_presence_of :password }
    it { should validate_length_of(:password).within(6..20) }
    it { should validate_presence_of :country }
    it { should validate_length_of(:country).within(2..20) }
    it { should validate_presence_of :flag_url }
    it { should validate_length_of(:flag_url).within(2..20) }
    it { should validate_presence_of :email }
    it { should validate_uniqueness_of(:email) }
    it { should validate_confirmation_of(:email) }
    it { should validate_presence_of :birth_date }
    it { should validate_presence_of :registration_date }

    it { should be_timestamped_document }
    it { should have_field(:stock).of_type(Integer).with_default_value_of(1) }
    .of_type(String) }

-----------------------------------------------------------------------------------
class Money

  #Modules
  include Mongoid::Document

  #Relations
  embedded_in :polymorphic_money, polymorphic: true

  #Attributes
  field :owner, type: Moped::BSON::ObjectId
  field :quantity, type: Integer

  #Validations (Attributes)
  validates :owner,
            :quantity,
            presence: true

  validates :quantity,
            allow_nil: false,
            numericality: {only_integer: true,
                           greater_than: 0 }

  #Behaviour
  #TODO: Behaviour (or DELETE)

end

 #Attributes
  field :thing_id, type: Moped::BSON::ObjectId
  field :name, type: String
  field :description, type: String
  field :quantity, type: Integer, default: 1

  #Validations (Attributes)
  validates :thing_id,
            :name,
            :description,
            :quantity,
            presence:true